version: '3.8'

services:

  react.app:
    container_name: react-app
    build:
      context: ./Frontend
    ports:
      - "53001:5173"
    environment:
      "PUBLIC_PORT": "53001"
    networks:
      - frontend

  api.gateway:
    container_name: api-gateway
    build:
      context: ./Backend
      dockerfile: Gateway/Dockerfile
    ports:
      - "52001:8080"
    networks:
      - frontend
      - data-service
    restart: on-failure

  storage.mongodb:
    container_name: mongo-metadata-storage
    build:
      context: ./Backend
      dockerfile: MongoMetadataStorage/Dockerfile
    networks:
      - data-service
    depends_on:
      - rabbitmq
    restart: on-failure

  service.registry:
    container_name: registry-service
    hostname: database-registry
    build:
      context: ./Backend
      dockerfile: RegistryService/Dockerfile
    ports:
      - "51001:8080"
    networks:
      - data-service
    depends_on: 
      - rabbitmq
    restart: on-failure

  service.registry.database:
    build:
      context: ./Backend/RegistryService/Database
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - data-service

  service.analyser:
    container_name: video-analyser-service
    hostname: video-analyser
    build:
      context: ./Backend
      dockerfile: VideoAnalyserService/Dockerfile
    environment:
      AZURE_TENANT_ID: dd81e623-e7fa-4d4b-a473-eca4731cb830
      AZURE_CLIENT_ID: 67c127f5-6693-481f-ba19-8ecdfc1e78f7
      AZURE_CLIENT_SECRET: g1uvH1Khposo0PDuX2PrV+vZbQ+benAd08dGGsvWnhk=
    ports:
      - "51011:8080"
    networks:
      - data-service
    restart: on-failure

  rabbitmq: # login username:password
    image: rabbitmq:3-management
    hostname: rabbitmq
    labels:
      NAME: "rabbitmq"
    environment:
      RABBITMQ_DEFAULT_USER: username
      RABBITMQ_DEFAULT_PASS: password
    ports:
    - "4369:4369"
    - "5671:5671"
    - "5672:5672"
    - "25672:25672"
    - "15671:15671"
    - "15672:15672"
    networks:
      - data-service
    

networks:
  frontend:
  data-service: